{"version":3,"sources":["components/main/main.js","components/updater/updater.js","components/Layout/sidebar.js","components/Layout/Layout.js","components/home/home.js","components/sms/sms.js","components/user/user.js","components/Routes.js","components/App.js","serviceWorker.js","index.js"],"names":["ipcRenderer","window","Main","props","state","redirectUrl","username","localStorage","getItem","password","loading","handleSubmit","bind","handleChange","on","event","data","console","log","this","setState","status","reqdata","preventDefault","setItem","indexOf","email","send","target","name","value","to","Container","className","Grid","columns","verticalAlign","centered","Row","Column","Segment","Dimmer","active","Loader","size","Form","onSubmit","onChange","Field","placeholder","Button","type","React","Component","Updater","updateFinish","logoDataUrl","releaseName","percentage","description","err","parseFloat","Progress","indicating","percent","parseInt","progress","Leftsidebar","Menu","vertical","Item","activeItem","onClick","handleItemClick","Layout","e","currentName","redirect","prevProps","prevState","snapshot","replace","split","minSize","defaultSize","children","Home","inverted","color","SMS","pn","content","Input","fluid","label","TextArea","Checkbox","UserManager","realname","isBot","checked","control","NoMatch","DebugRouter","JSON","stringify","history","listen","location","action","pathname","search","hash","Router","Routes","path","exact","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f1b661e1.chunk.js","sourcesContent":["import React from 'react'\nimport {\n  Button,\n  Checkbox,\n  Form,\n  Container,\n  Segment,\n  Dimmer,\n  Loader,\n  Grid\n} from \"semantic-ui-react\";\nimport {\n  Redirect\n} from \"react-router-dom\";\n\nimport \"stylesheets/main.css\";\nconst {\n  ipcRenderer\n} = window;\n\n\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      redirectUrl: '',\n      username : localStorage.getItem(\"username\"),\n      password : localStorage.getItem(\"password\"),\n      loading: false\n    }\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    ipcRenderer.on(\"response_user_login\", function (event, data) {\n      console.log(data);\n      this.setState(\n          { loading:false }\n      )\n      if (data.status === 200) this.setState({redirectUrl: '/home'});\n    }.bind(this));\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.setState(\n      { loading:true }\n    )\n\n    if (this.state.username !== \"\" && this.state.password !== \"\") {\n      localStorage.setItem(\"username\", this.state.username);\n      localStorage.setItem(\"password\", this.state.password);\n    }\n    let reqdata;\n    if(this.state.username.indexOf('@') > -1) reqdata = {email:this.state.username, password:this.state.password}\n    else reqdata = {username:this.state.username, password:this.state.password};\n    \n    ipcRenderer.send(\"request_user_login\", reqdata);\n    console.log(this.state.username, this.state.password);\n  }\n  handleChange(event) {\n    switch (event.target.name) {\n      case \"username\":\n        this.setState({username:event.target.value})\n        break;\n      case \"password\":\n        this.setState({password:event.target.value})\n        break;\n      default:\n        break;\n    }\n  }\n\n  render (){\n    if(this.state.redirectUrl !== \"\"){\n      console.log(\"redirect to \", this.state.redirectUrl)\n      return (<Redirect to={this.state.redirectUrl}/>)\n    }\n      \n    return (\n      <Container className=\"fullWidth\">\n        <Grid columns={2} verticalAlign='middle' centered className=\"centered fullWidth\">\n          <Grid.Row>\n            <Grid.Column>\n              <Segment>\n                {this.state.loading &&\n                <Dimmer active className=\"dimmerColoring\">\n                  <Loader size='massive'>로그인중</Loader>\n                </Dimmer>\n                }\n                <Form onSubmit={this.handleSubmit} onChange={this.handleChange}>\n                  <Form.Field>\n                    <label>MULTITOOL 아이디</label>\n                    <input name=\"username\" value={this.state.username} placeholder='MULTITOOL 아이디' />\n                  </Form.Field>\n                  <Form.Field>\n                    <label>MULTITOOL 비밀번호</label>\n                    <input name=\"password\" value={this.state.password} placeholder='MULTITOOL 비밀번호' />\n                  </Form.Field>\n                  <Form.Field>\n                  </Form.Field>\n                  <Button type='submit'>Submit</Button>\n                </Form>\n              </Segment>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </Container>\n      \n    );\n  }\n}\n\nexport default Main;","import React from 'react';\n\nimport { Grid, Progress } from \"semantic-ui-react\";\n\nconst { ipcRenderer } = window;\n\nclass Updater extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      updateFinish: false,\n      logoDataUrl: '',\n      releaseName: '',\n      percentage: 0,\n      description: ''\n    }\n  }\n\n  componentDidMount() {\n    ipcRenderer.send(\"register_updateWindow\");\n\n    ipcRenderer.on(\"response_svg_to_data_url\", (event, data) => {\n      data.status === \"success\" ? this.setState({ logoDataUrl: data.data }) : console.log(data.err)\n    })\n    \n    ipcRenderer.on(\"updateProgressPercentage\", (event, data) => {\n      this.setState({\n        percentage: data\n      })\n    });\n    ipcRenderer.on(\"updateReleaseVersion\", (event, data) => {\n      this.setState({\n        releaseName: data\n      })\n    })\n    // ipcRenderer.on(\"updateDescription\", (event, data) => {\n    //   this.setState({\n    //     description: data\n    //   })\n    // })\n  }\n\n  render() {\n    // const isScrapping = this.state.scrapMode;\n    return (\n      <Grid>\n        {/* <h1>{this.state.percentage}</h1> */}\n        <Grid.Row>\n          <Grid.Column>\n            <h3>{parseFloat(this.state.percentage) === 100 ? \"업데이트 완료! 확인 버튼을 눌러 창을 닫아주세요\" : \"업데이트 중...\"}</h3>\n            <Progress indicating percent={parseInt(this.state.percentage)} progress />\n            <div className=\"col-2 mx-0 px-0 float-right mt-3\">\n            </div>\n          </Grid.Column>\n        </Grid.Row>ㅇ\n      </Grid>\n    );\n  };\n}\n\nexport default Updater;","import React from 'react'\nimport {\n  Menu,\n  Label,\n  Input\n} from \"semantic-ui-react\";\n\nfunction Leftsidebar(props) {\n  return (\n    <Menu vertical>\n      <Menu.Item\n        name=\"home\"\n        active={props.activeItem === \"home\"}\n        onClick={props.handleItemClick}\n      >\n        HOME\n      </Menu.Item>\n      <Menu.Item\n        name=\"sms\"\n        active={props.activeItem === \"sms\"}\n        onClick={props.handleItemClick}\n      >\n        SMS 전송관리\n      </Menu.Item>\n\n      <Menu.Item\n        name=\"user\"\n        active={props.activeItem === \"user\"}\n        onClick={props.handleItemClick}\n      >\n        회원관리\n      </Menu.Item>\n\n      <Menu.Item\n        name=\"commoninfo\"\n        active={props.activeItem === \"commoninfo\"}\n        onClick={props.handleItemClick}\n      >\n        공통정보 등록\n      </Menu.Item>\n\n      <Menu.Item\n        name=\"updates\"\n        active={props.activeItem === \"updates\"}\n        onClick={props.handleItemClick}\n      >\n        잔고현황\n      </Menu.Item>\n    </Menu>\n  );\n}\n\nexport {\n  Leftsidebar\n}","import React from 'react'\nimport {\n  Container, Divider\n} from \"semantic-ui-react\";\nimport \"stylesheets/global.css\"\nimport SplitPane, { Pane } from \"react-split-pane\";\nimport {Leftsidebar} from \"./sidebar.js\";\nimport {\n  Redirect\n} from \"react-router-dom\";\n\n\nclass Layout extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeItem: props.currentName,\n      redirect: ''\n    };\n    console.log(\"CURRENT : \", this.state.activeItem)\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if(this.state.activeItem !== prevState.activeItem && this.state.activeItem !== this.props.currentName) {      \n      var redirectUrl = '/' + this.state.activeItem.replace('_','/')\n      console.log(redirectUrl)\n\n      this.setState({\n        redirect: redirectUrl\n      })\n    }\n  }\n\n  handleItemClick = (e, { name }) => {\n    this.setState({ activeItem: name });\n  }\n\n  render() {\n    if(this.state.redirect) return <Redirect to={this.state.redirect} />\n    return (\n      <div>\n        <SplitPane split=\"vertical\" className=\"makeScrollable\" minSize={100} defaultSize={212}>\n          <div className=\"dividerLeft\">\n            <Leftsidebar\n              activeItem={this.state.activeItem}\n              handleItemClick={this.handleItemClick}\n            />\n          </div>\n          <div className=\"dividerRight\">\n            {this.props.children}\n          </div>\n        </SplitPane>\n      </div>\n    )\n  }\n}\n\nexport default Layout;","import React from 'react';\nimport {\n  Button,\n  Grid,\n  Segment,\n  Icon\n} from \"semantic-ui-react\";\nimport {\n  Redirect\n} from \"react-router-dom\";\nimport \"stylesheets/main.css\";\nimport Layout from 'components/Layout/Layout';\n\n\nconst {\n  ipcRenderer\n} = window;\n\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      redirectUrl: '',\n    }\n  }\n\n  render() {\n    if(this.state.redirectUrl !== \"\"){\n      console.log(\"redirect to \", this.state.redirectUrl)\n      return (<Redirect to={this.state.redirectUrl}/>)\n    }\n    return (\n      <Layout currentName=\"home\">\n        <Segment inverted>\n          <Grid columns='equal'>\n            <Grid.Row>\n              <Grid.Column>\n                <Button onClick={() => {this.setState({redirectUrl: '/sms'})}} size='massive' color='red'>\n                  SMS 전송 관리\n                </Button>\n              </Grid.Column>\n              <Grid.Column>\n                <Button onClick={() => {this.setState({redirectUrl: '/'})}} size='massive' color='orange'>\n                  텔레그램 봇 관리\n                </Button>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </Segment>\n      </Layout>\n    )\n  }\n}\n\nexport default Home;","import React from 'react';\nimport {\n  Button,\n  Grid,\n  Segment,\n  Icon,\n  Form\n} from \"semantic-ui-react\";\nimport {\n  Redirect\n} from \"react-router-dom\";\nimport Layout from 'components/Layout/Layout';\n\nimport \"stylesheets/main.css\";\n\n\nconst {\n  ipcRenderer\n} = window;\n\n\nclass SMS extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      redirectUrl: '',\n    }\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const pn = event.target.pn.value;\n    const content = event.target.content.value;\n\n    const data = { pn, content};\n    console.log(data);\n    ipcRenderer.send('request_send_sms', data);\n  }\n\n  render() {\n    if(this.state.redirectUrl !== \"\"){\n      console.log(\"redirect to \", this.state.redirectUrl)\n      return (<Redirect to={this.state.redirectUrl}/>)\n    }\n    return (\n      <Layout currentName=\"sms\">\n        <Segment inverted>\n          <Form onSubmit={this.handleSubmit} inverted>\n            <Form.Input fluid name='pn' label='메세지 전송할 번호' placeholder='010~~~~~~~~' />\n            <Form.TextArea fluid name='content' label='메세지 내용' placeholder='메세지 전송용내용' />\n            <Form.Checkbox label='메세지 내용이 정확한가요?' />\n            <Button type='submit' color='facebook'>메세지 전송</Button>\n          </Form>\n        </Segment>\n      </Layout>\n    )\n  }\n}\n\nexport default SMS;","import React from 'react';\nimport {\n  Button,\n  Grid,\n  Segment,\n  Icon,\n  Form,\n  Input\n} from \"semantic-ui-react\";\nimport {\n  Redirect\n} from \"react-router-dom\";\nimport Layout from 'components/Layout/Layout';\n\nimport \"stylesheets/main.css\";\n\n\nconst {\n  ipcRenderer\n} = window;\n\n\nclass UserManager extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      redirectUrl: '',\n    }\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const name = event.target.realname.value;\n    const email = event.target.email.value;\n    const username = event.target.username.value;\n    const password = event.target.password.value;\n    const isBot = event.target.isBot.checked;\n\n    const data = { name, email, username, password, isBot};\n    console.log(data);\n    ipcRenderer.send('request_user_register', data);\n  }\n\n  render() {\n    if(this.state.redirectUrl !== \"\"){\n      console.log(\"redirect to \", this.state.redirectUrl)\n      return (<Redirect to={this.state.redirectUrl}/>)\n    }\n    return (\n      <Layout currentName=\"user\">\n        <Segment >\n          <Form onSubmit={this.handleSubmit}>\n            <Form.Input fluid name='realname' label='이름' placeholder='관리자' />\n            <Form.Field fluid type='email' name='email' label='이메일' placeholder='admin@kuuwang.com' control={Input} />\n            <Form.Input fluid name='username' label='아이디' placeholder='username' />\n            <Form.Input fluid name='password' label='비밀번호' placeholder='password' />\n            <Form.Checkbox name='isBot' label='봇?' />\n            <Button type='submit' color='facebook'>메세지 전송</Button>\n          </Form>\n        </Segment>\n      </Layout>\n    )\n  }\n}\n\nexport default UserManager;","import React from \"react\";\nimport { HashRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\n// BrowserRouter 사용시에 패키징 후 빈화면만 나오는 이슈 확인하여 변경함\nimport Main from \"components/main/main\";\nimport Updater from \"components/updater/updater.js\";\nimport Home from \"components/home/home.js\";\nimport SMS from \"components/sms/sms.js\"\nimport UserManager from \"components/user/user.js\";\n\nfunction NoMatch () {\n  return (\n    <div>\n    <Redirect to='/'/>\n    </div>\n  )\n}\n\n\nclass DebugRouter extends Router {\n  constructor(props) {\n    super(props);\n    console.log('initial history is: ', JSON.stringify(this.history, null, 2))\n    this.history.listen((location, action) => {\n      console.log(\n        `The current URL is ${location.pathname}${location.search}${location.hash}`\n      )\n      console.log(`The last navigation action was ${action}`, JSON.stringify(this.history, null, 2));\n    });\n  }\n}\n\nexport default function Routes () {\n  return (\n    <DebugRouter>\n      <Switch>\n        <Route path=\"/\" exact>\n          <Main />\n        </Route>\n        <Route path=\"/update\">\n          <Updater />\n        </Route>\n        <Route path=\"/home\">\n          <Home />\n        </Route>\n        <Route path=\"/sms\">\n          <SMS />\n        </Route>\n        <Route path='/user'>\n          <UserManager />\n        </Route>\n        <Route>\n          <NoMatch />\n        </Route>\n\n        \n      </Switch>\n    </DebugRouter>\n  )\n};","import React from 'react';\nimport 'stylesheets/App.css';\nimport Routes from \"./Routes\"\nimport 'semantic-ui-css/semantic.min.css'\n\nconst {\n  ipcRenderer\n} = window;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    ipcRenderer.send(\"request_crawler_register\");\n  }\n  render() {\n    // 로그인 여부 확인 후 Home / Login 페이지로 넘겨주기\n    return (\n      <div className=\"App\">\n        <Routes />\n      </div>\n    );\n    \n  }\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'stylesheets/global.css';\nimport App from 'components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}